#!/usr/bin/env python

from setuptools import setup
import hpcdo
import argparse
import json


# functions
def usage(args):
  hpcdo.showUsage()

def ls(args):
  jobs  = hpcdo.JobDescriptions().content.iteritems()
  for k,v in jobs:
    print " ", k , " : " , v["desc"]

def qs(args):
  jobs  = hpcdo.JobDescriptions().reload()
  for k,v in jobs:
    print "name:", k , " desc:" , v["desc"]

def submit(args):
  print "submitting job to the scheduler" , args

  # get job list, for now we look in current folder
  jobs  = hpcdo.JobDescriptions()

  # create the template -- assume job type for now
  job = hpcdo.TemplateJob(jobs.getJobDesc(args.job[0]))

  if (args.n!=None):
    job.desc["ncore"] = args.n

  # get the cluster control
  sc = hpcdo.SgeLocalScheduler()
  sc.submit(job)

  # finally et job list and append
#  jl = hpcdo.JobList()
#  jl.add(job)
#  jl.save()

  print "done"



## Defining arguments
parser = argparse.ArgumentParser(
  description ='Command line utility to control hpc on machine but also remotely',
  epilog      ="that's all")

#parser.add_argument('-r',action='store',help='remote server to use if not default')
subparsers = parser.add_subparsers(help='sub-command help')

parser_usage = subparsers.add_parser('use', help='list usage by all users')
parser_usage.set_defaults(func=usage)

parser_ls = subparsers.add_parser('ls', help='list available job descriptions')
parser_ls.set_defaults(func=ls)
parser_qs = subparsers.add_parser('qs', help='list currently active jobs')
parser_qs.set_defaults(func=qs)

parser_sub = subparsers.add_parser('sub', help='submit a job')
parser_sub.add_argument('job', nargs='+', help='name of the job')
parser_sub.add_argument('-n' , help='overwrite the number of cores')
parser_sub.set_defaults(func=submit)

args = parser.parse_args()
args.func(args)


